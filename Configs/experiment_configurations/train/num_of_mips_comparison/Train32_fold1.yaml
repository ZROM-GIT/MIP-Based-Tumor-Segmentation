# Resume training (optional) and log experiment (optional)
train: True
test: False
resume_training: False
checkpoint_to_resume_from: '/Checkpoints/...'
log_experiment: false
run_id: ''
log_temps: false

# Trainer and Tester to load
trainer: 'trainers.trainer.Trainer'
tester: 'testers.tester.Tester'

# Path to JSON file that holds all the dataset paths
json_path: 'Configs/json_datasets/num_of_mips_comparison/MIPs32/MIPs32_75th_25vth_IncSplit_0_180_fold1.json'

# Saves paths
save_weights_path: 'Weights'
save_checkpoints_path: 'Checkpoints'
save_val_predictions_path: 'ValPredictions'

# Project & experiment details
project_name: PET
experiment_name: 'Train32_fold1'
experiment_number: 999

#########################################################################################

# Constant values for yaml 
num_of_mips: &num_of_mips
    32
input_name: &input_name
    'SUV_mips'
target_name: &target_name
    'SEG_mips'

#########################################################################################

# Training Parameters
device: 0  # Number of GPU (0/1) or 'cpu'
use_amp: True  # Always uses Scaler. Always False when not training on GPU
amp_dtype: float16  # torch.(float16/bfloat16)
use_gradient_clipping: False
use_scheduler: True
use_sliding_window_inference: [] # ['training', 'validation', 'test']
save_checkpoint_every_n: 25  # Save checkpoint every epoch number
save_checkpoint_when_val_improves: True  # True/False

# Hyperparameters
batch_size: 1
accum_iter: 1
epochs: 200
shuffle_data: True
seed: 598484 # None for non-determinism

# Dataset type
dataset_arguments:
    dataset_type: Dataset  # CacheDataset for speed (more memory) / SmartCacheDataset for partial cached datasets

# Optimizer arguments
optimizer_arguments: 
    optimizer: 'Adam'
    momentum: 0.9
    lr: 1e-4
    
# Loss function arguments
loss_function_arguments: 
    loss_function_name: 'DiceLoss'
    include_background: false 
    
# Learning Rate Scheduler
scheduler_arguments: 
    scheduler: CyclicLR
    base_lr: 5e-6
    max_lr: 1e-4
    mode: triangular2
    step_size_up: 10
    step_size_down: 20
    gamma: 0.6
    cycle_momentum: false

# Model arguments
model_arguments: 
    model_name: AttentionUnet
    in_channels: 1
    out_channels: 2
    spatial_dims: 3
    channels: [16, 32, 64, 128, 256]
    strides: [2, 2, 2, 2]
    kernel_size: 3
    up_kernel_size: 3

# Final activation 
final_activation: softmax

# Whether to use sliding window inference 
sliding_window_inference_params:
    roi_size: [208, 400, 16]
    sw_batch_size: 8
    overlap: 0.5
    mode: 'gaussian'

# Metrics
metrics:
    DiceMetric: 
        include_background: false
        get_not_nans: true 
        ignore_empty: false 
    HausdorffDistanceMetric: {} 
metricForSaving: DiceMetric

# Transforms
defaultTransforms:
    LoadImaged:
        keys: 
            - *input_name
            - *target_name
        image_only: true
        ensure_channel_first: true
        dtype: 'float16'
    ToTensord:
        keys: 
            - *target_name
        dtype: 'long'
    onehot_bin:
        keys:
            - *target_name
        dim: 0
    DivisiblePadd:
        keys:
            - *input_name
            - *target_name
        k: 16
        method: 'symmetric'       


trainTransforms: {}

valTransforms: {}

testTransforms: {}

# Utilities
sets: ['training', 'validation', 'test']
set2transforms:
    training: trainTransforms
    validation: valTransforms
    test: testTransforms

# Inverse transforms 
training_inverse_transforms:
    activation: False
    timing: 'pre' # pre / post metric calculation
    num_of_reverses: -1

validation_inverse_transforms:
    activation: False
    timing: 'pre' # pre / post metric calculation
    num_of_reverses: -1

test_inverse_transforms:
    activation: False
    timing: 'pre' # pre / post metric calculation
    num_of_reverses: -1
